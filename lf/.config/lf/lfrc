# Basic Settings
set hidden true
set drawbox true
set icons true
set ignorecase true
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'

# Custom Functions
cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) $EDITOR "$f";;
        *) xdg-open "$f" ;;
    esac
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}


# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

# Bindings
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map e
map f

# File Openers
#map ee $$EDITOR "$f"
#map u $view "$f"

# Archive Mappings
map au unarchive

# Trash Mappings
#map dd trash
#map tc clear_trash
#map tr restore_trash

# Basic Functions
map . set hidden!
#map DD delete
map p paste
map x cut
map y copy
map <enter> open
map mf mkfile
map md mkdir
map r rename
map R reload
map U unselect

# Source Bookmarks
source "~/.config/lf/shortcutrc"
